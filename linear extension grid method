target=100 # how many linear extensions you want


N=[0,1,2,3,4,5]
n=len(N)
den=2**n

import random
linear_extension=[[],[0],[1],[2],[3],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[0,1,2],[0,1,3],[0,2,3],[1,2,3],[0,1,2,3],[4],[0, 4],[1,4],[2,4],[3,4],[0,1,4],[0,2,4],[0,3,4],[1,2,4],[1,3,4],[2,3,4],[0,1,2,4],[0,1,3,4],[0,2,3,4],[1,2,3,4],[0,1,2,3,4],[5],[0,5],[1,5],[2,5],[3,5],[0,1,5],[0,2,5],[0,3,5],[1,2,5],[1,3,5],[2,3,5],[0,1,2,5],[0,1,3,5],[0,2,3,5],[1,2,3,5],[0,1,2,3,5],[4,5],[0, 4, 5],[1,4,5],[2,4,5],[3,4,5],[0,1,4,5],[0,2,4,5],[0,3,4,5],[1,2,4,5],[1,3,4,5],[2,3,4,5],[0,1,2,4,5],[0,1,3,4,5],[0,2,3,4,5],[1,2,3,4,5],[0,1,2,3,4,5]]


def is_subset(V1,V2):
    flag=1
    for k in V1:
        if k not in V2:
            flag=0
    return flag

def fact(n):
    if n==1:
        return 1
    else:
        return fact(n-1)
                        
def permutation_ext_lin(L,m):
    if is_subset(L[m],L[m+1])==1:
        return 999
    else:
        c=L[m]
        L[m]=L[m+1]
        L[m+1]=c
        return L
num=0
num2=0
count=0
ALL_ext=[]
factn=fact(n)
while num2<target:
    r=random.randint(0, den-2)
    temp_lin=permutation_ext_lin(linear_extension,r)
    if temp_lin !=999:
        linear_extension=temp_lin.copy()
        num+=1
        if num//10000==num/10000:
            ALL_ext.append(linear_extension)
            num2+=1
    
lenall=len(ALL_ext)

attributed=[]


def give_corner():
    for x in range(len(ALL_ext)):
        for y in range(1,2**n-1):
            if [x,y] not in attributed:
                return [x,y]

def ypu(y):
    return y%lenall

def test_if_can_be_added(antichain,S):
    flag=1
    for T in antichain:
        if is_subset(T,S)==1:
            flag=0
    return flag

list_antichains=[]
tot=lenall*(2**n-2)
flag=1
    

while len(attributed) !=tot:
    if flag==1:
        [x,y]=give_corner()
        antichain=[ALL_ext[x][y]]
        attributed.append([x,y])
        flag=0
    else:
        if ALL_ext[ypu(x+1)][y] not in attributed and test_if_can_be_added(antichain,ALL_ext[ypu(x+1)][y])==1:
            x=ypu(x+1)
            antichain.append(ALL_ext[x][y])
            attributed.append([x,y])
        else:
            if y != 2**n-2:
                if ALL_ext[x][y+1] not in attributed and test_if_can_be_added(antichain,ALL_ext[x][y+1])==1:
                    y=y+1
                    antichain.append(ALL_ext[x][y])
                    attributed.append([x,y])
                else:
                    if ALL_ext[ypu(x+1)][y+1] not in attributed and test_if_can_be_added(antichain,ALL_ext[ypu(x+1)][y+1])==1:
                        x=ypu(x+1)
                        y=y+1
                        antichain.append(ALL_ext[x][y])
                        attributed.append([x,y])
                    else:
                        list_antichains.append(antichain)
                        flag=1
            else:
                list_antichains.append(antichain)
                flag=1

    
for k in list_antichains:
    print(k)
        
