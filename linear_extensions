# This algorithm generates random linear extensions
# It implements the algorithm presented in the following paper:
#title={On the conductance of Markov chains},
#author={A. Karzanov and Leonid Khachiyan},
#journal={Order},
#year={1991},
# We use this code as a modul in algo9 


target=100 # how many linear extensions you want


N=[0,1,2,3]
n=len(N)
den=2**4

import random
linear_extension=[[],[0],[1],[2],[3],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[0,1,2],[0,1,3],[0,2,3],[1,2,3],[0,1,2,3]]


def is_subset(V1,V2):
    flag=1
    for k in V1:
        if k not in V2:
            flag=0
    return flag

def fact(n):
    if n==1:
        return 1
    else:
        return fact(n-1)

# m in 0,2^n-1                          
def permutation_ext_lin(L,m):
    if is_subset(L[m],L[m+1])==1:
        return 999
    else:
        c=L[m]
        L[m]=L[m+1]
        L[m+1]=c
        return L
                          
num=0
count=0
ALL_ext=[]
factn=fact(n)
while num<target:
    count+=1
    r=random.randint(0, den-2)
    temp_lin=permutation_ext_lin(linear_extension,r)
    if temp_lin !=999:
        linear_extension=temp_lin.copy()
        num+=1
        ALL_ext.append(linear_extension)
        
      
        
