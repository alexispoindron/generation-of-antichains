import random

N=[0,1,2,3,4]
n=len(N)



def random_set(N):
    L=[]
    while L==[]:
        L=[]
        for k in N:
            if random.random()<1/2:
                L.append(k)
    return L

def is_subset(V1,V2):
    flag=1
    for k in V1:
        if k not in V2:
            flag=0
    return flag

def test_if_antichain(L):
    for kS in range(len(L)):
        for kT in range(len(L)):
            if kS != kT and (is_subset(L[kS],L[kT])==1 or is_subset(L[kT],L[kS])==1):
                return 0
    return 1
    
def remove_one_duplicate(L):
    pairs = []
    for kS in range(len(L)):
        for kT in range(len(L)):
            if kS != kT and is_subset(L[kS], L[kT]):
                pairs.append([L[kS], L[kT]])

    longueurs_sub = []
    for k in range(len(pairs) * len(pairs)):
        longueurs_sub.append([])

    for p in range(len(pairs)):
        countp = 0
        for q in range(p + 1, len(pairs)):
            if pairs[p][0] == pairs[q][0]:
                countp += 1
        longueurs_sub[countp].append(pairs[p][0])
    
    longueurs_super = []
    for k in range(len(pairs) * len(pairs)):
        longueurs_super.append([])

    for p in range(len(pairs)):
        countp = 0
        for q in range(p + 1, len(pairs)):
            if pairs[p][1] == pairs[q][1]:
                countp += 1
        longueurs_super[countp].append(pairs[p][1])
    
    for k in range(len(pairs) * len(pairs) - 1, -1, -1):
        if longueurs_sub[k] != []:
            L.remove(longueurs_sub[k][0])
            return L
        if longueurs_super[k] != []:
            L.remove(longueurs_super[k][0])
            return L
        


def remove_duplicates(L):
    while test_if_antichain(L)==0:
        remove_one_duplicate(L)
    return L

def sym_def(S,B):
    M=[]
    for k in S:
        if k not in B:
            M.append(k)
    for k in B:
        if k not in S:
            M.append(k)
    if [] in M:
        M.remove([])
    M=sorted(M)
    return M

def relabel(A):
    B = random_set(N)
    for i in range(len(A)):
        A[i] = sym_def(A[i], B)
    A=sorted(A)
    return A

antichain=[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
antichain_random_method=[]

ALL=[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
ALL_random=[]

for k in range(10000):
    for j in range(5): # Batch size to be optimized. 
        antichain.append(random_set(N))
        antichain_random_method.append(random_set(N))
    antichain_without_dupl = []
    for sublist in antichain:
        if sublist not in antichain_without_dupl:
            antichain_without_dupl.append(sublist)
    antichain=remove_duplicates(relabel(antichain_without_dupl))
    
    
    antichain_random_method_without_dupl = []
    for sublist in antichain_random_method:
        if sublist not in antichain_random_method_without_dupl:
            antichain_random_method_without_dupl.append(sublist)
    
    if antichain not in ALL:
        ALL.append(antichain[:])
        
    if antichain_random_method_without_dupl not in ALL_random:
        ALL_random.append(antichain_random_method_without_dupl[:])
    



print("")
print("Method 2")
print(len(ALL),"/ 7581")
print("")
print("Naive nethod")
print(len(ALL_random),"/ 7581")
print("")
