# This algorithm calculates the overall tension of a labelled Hasse-diagram.
# A labelled Hasse diagram represents a game (monotone values) where all values
# from 0 to 2^n-1 are used.

import linear_extensions


N=linear_extensions.N
n=len(N)

from itertools import chain, combinations

def generate_subsets(N):
    all_subsets = [[]]
    for element in N:
        current_subsets = [subset + [element] for subset in all_subsets]
        all_subsets.extend(current_subsets)
    return all_subsets


def union(S, T):
    uni = set(S)
    uni.update(T)
    return list(uni)


def setminus(S, T):
    SS=S.copy()
    setm = list(SS)
    for k in T:
        if k in SS:
            SS.remove(k)
    return SS

def is_subset(V1,V2):
    flag=1
    for k in V1:
        if k not in V2:
            flag=0
    return flag

lin_ext = linear_extensions.ALL_ext[len(linear_extensions.ALL_ext) - 1]

values_sets=[]
for k in range(2**n):
    values_sets.append([lin_ext[k],k])
    
    
def give_index(S):
    for k in range(2**n):
        if values_sets[k][0]==S:
            return k
    
    
list_of_tensions = [[] for _ in range((2**n)*n)]
    
def tension(S):
    count=0
    for k in setminus(N,S):
        count+= give_index(union(S,[k]))-give_index(S)
    return count


count=0
for S in generate_subsets(N.copy()):
    tS=tension(S)
    count+=tS
    list_of_tensions[tS].append(S)
print("total tension=",count)
print("list of tensions=",list_of_tensions)


def can_be_added_to_antichain(antichain,S):
    flag=1
    for ase in antichain:
        if is_subset(S,ase)==1 or is_subset(ase,S)==1:
            flag=0
    return flag


antichain=[]
flag=1
for sett in range(len(list_of_tensions)-1,-1,-1):
    if flag !=0:
        if list_of_tensions[sett] !=[]:
            for u in list_of_tensions[sett]:
                if can_be_added_to_antichain(antichain,u)==1:
                    antichain.append(u)
                else:
                    flag=0

print(antichain)
        
        
        
        
        
